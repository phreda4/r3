*MAP
16 11
#==============#
#              #
#              #
#              #
#              #
#              #
#      .       #
#              #
#              #
#              #
================
*ITEM
0 4 5 0 0	| player
2 11 5 29 2	| place
1 8 5 22 0	| box
3 10 2 31 8	| coin
3 10 7 27 0 | batt
2 8 2 39 2 	| buble
*SCRIPT
You can control the robot, using %caWORDS%c3.
these %caWORDS%c3 are write in the %c6CODE%c3.
Here each %caWORD%c3 has a meaning.
%a0
%s

: 2 step ;

%s

%cd:%c3    indicates where to start executing.
%cf2%c3    push 2 in the stacks.
%cbstep%c3 moves the robot in direction 2.
%cb;%c3    ends.

Press %i%cbF1%c3%i to execute the %c6CODE%c3.
%w1
If you enter %c7NUMBERS%c3, they push in the %c6STACK%c3
Some %caWORDS%c3 take this %c7NUMBERS%c3, do things and can back the result.

%s

: 1 2 3 * + 10 - ;

%s

%ca+%c3 add two top %c7NUMBERS%c3 on %c6STACK%c3.
%ca-%c3, %ca*%c3, %ca/%c3 can make subtration, multiply and division.

Press %i%cbF1%c3%i to execute the %c6CODE%c3.
%w1
You can modify the stack with these %caWORDS%c3.

%cbdup%c3  duplicate the top of %c6STACK%c3.
%cbdrop%c3 remove top of %c6STACK%c3.
%cbswap%c3 swap the upper two %c7NUMBERS%c3.
%cbover%c3 duplicate the second of %c6STACK%c3.

%s

: 10 20 swap 
	drop 1 over ;

%s

Press %i%cbF1%c3%i to execute the %c6CODE%c3.
%w1
Some %caWORDS%c3 make the robot doing things.

%castep%c3 advances one step, the direction is the %c7NUMBERS%c3 in %c6STACK%c3.
with this indication:

	7 0 1
	6   2
	5 4 3

%s

: 2 step 3 step 4 step ;

%s
%w1
Sometimes you need to repeat %caWORDS%c3 many times, 
for this we are going to use LOOPS.

%s

: 0 ( 10 <? 1 + ) drop ;

%s
%caWORDS%c3 enclosed between %ca(%c3 and %ca)%c3 be a block of WORDS

The CONDITIONAL in this case is %ca<?%c3, 
the number in the %c6STACK%c3 is used to count the repetitions 
WHILE the conditional is TRUE it will repeat the %caWORDS%c3 in brackets.
Once the block ends, %cadrop%c3 removes the number from the %c6STACK%c3.

Always need the stack be balanced.

%w1
We can add other %caWORDS%c3 inside the LOOP to repeat

%s

: 0 ( 10 <? 1 + 
	2 step ) drop ;

%s
Some other conditionals are:

%ca=?%c3     Compares two numbers, removes the first, TRUE when the numbers are equal
%ca<? >?%c3  Checks if it is less or greater

Some conditionals do not remove the number from the stack, for example

%ca0?%c3 is TRUE when the number is 0
%ca1?%c3 is TRUE when the number is not 0

%w1
Another %caWORDS%c3 from robot is check, this %caWORDS%c3 take the direction of check and
leave in %c6STACK%c3 the content of the map:
0 - empty / 1 - wall / 2 - a box

you can execute a %caWORDS%c3 only if a condition is TRUE put conditional %caWORDS%c3
previus to the ( ) %caWORDS%c3.
%s
: 
	0 ( 10 <?
		2 check
		0? ( 2 step )
		drop
		1 + ) drop ;
		
%s

This code only advance if the next cell is empty;
%w1
You can define new %caWORDS%c3 using the prefix : in the %c6CODE%c3
this can be usefull for make %c6CODE%c3 more clear and build thing

%s

:left 2 step ;

:goleft
	( 2 check 0 =? drop 
		left ) drop ;
		
: goleft ;

%s

You need build a %c6STACK%c3 behavior for balance all %caWORDS%c3.

%w1

End of tutorial 1
%e