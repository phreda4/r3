#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <linux/videodev2.h>
#include <errno.h>

#define CLEAR(x) memset(&(x), 0, sizeof(x))

struct buffer {
    void *start;
    size_t length;
};

struct v4l2_frmsizeenum frmsize;
CLEAR(frmsize);
frmsize.pixel_format = V4L2_PIX_FMT_YUYV;
frmsize.index = 0;

printf("Resoluciones soportadas:\n");
while (ioctl(fd, VIDIOC_ENUM_FRAMESIZES, &frmsize) == 0) {
    if (frmsize.type == V4L2_FRMSIZE_TYPE_DISCRETE) {
        printf("  %dx%d\n", frmsize.discrete.width, frmsize.discrete.height);
    }
    frmsize.index++;
}

int main() {
    int fd;
    struct v4l2_capability cap;
    struct v4l2_format fmt;
    struct v4l2_requestbuffers req;
    struct v4l2_buffer buf;
    enum v4l2_buf_type type;
    struct buffer *buffers;
    unsigned int n_buffers;
    
    // 1. Abrir dispositivo con open()
    fd = open("/dev/video0", O_RDWR | O_NONBLOCK);
    if (fd == -1) {
        perror("Error abriendo /dev/video0");
        return 1;
    }
    
    // 2. Consultar capacidades con ioctl()
    CLEAR(cap);
    if (ioctl(fd, VIDIOC_QUERYCAP, &cap) == -1) {
        perror("VIDIOC_QUERYCAP");
        close(fd);
        return 1;
    }
    
    printf("Driver: %s\n", cap.driver);
    printf("Card: %s\n", cap.card);
    printf("Bus: %s\n", cap.bus_info);
    
    if (!(cap.capabilities & V4L2_CAP_VIDEO_CAPTURE)) {
        printf("El dispositivo no soporta captura de video\n");
        close(fd);
        return 1;
    }
    
    if (!(cap.capabilities & V4L2_CAP_STREAMING)) {
        printf("El dispositivo no soporta streaming\n");
        close(fd);
        return 1;
    }
    
    // 3. Configurar formato con ioctl()
    CLEAR(fmt);
    fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    fmt.fmt.pix.width = 640;
    fmt.fmt.pix.height = 480;
    fmt.fmt.pix.pixelformat = V4L2_PIX_FMT_YUYV;
    fmt.fmt.pix.field = V4L2_FIELD_INTERLACED;
    
    if (ioctl(fd, VIDIOC_S_FMT, &fmt) == -1) {
        perror("VIDIOC_S_FMT");
        close(fd);
        return 1;
    }
    
    printf("Resolución: %dx%d\n", fmt.fmt.pix.width, fmt.fmt.pix.height);
    
    // 4. Solicitar buffers con ioctl()
    CLEAR(req);
    req.count = 4;
    req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    req.memory = V4L2_MEMORY_MMAP;
    
    if (ioctl(fd, VIDIOC_REQBUFS, &req) == -1) {
        perror("VIDIOC_REQBUFS");
        close(fd);
        return 1;
    }
    
    if (req.count < 2) {
        printf("Memoria insuficiente\n");
        close(fd);
        return 1;
    }
    
    // 5. Mapear buffers con mmap()
    buffers = calloc(req.count, sizeof(*buffers));
    
    for (n_buffers = 0; n_buffers < req.count; ++n_buffers) {
        CLEAR(buf);
        buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        buf.memory = V4L2_MEMORY_MMAP;
        buf.index = n_buffers;
        
        if (ioctl(fd, VIDIOC_QUERYBUF, &buf) == -1) {
            perror("VIDIOC_QUERYBUF");
            close(fd);
            return 1;
        }
        
        buffers[n_buffers].length = buf.length;
        buffers[n_buffers].start = mmap(NULL, buf.length,
                                        PROT_READ | PROT_WRITE,
                                        MAP_SHARED,
                                        fd, buf.m.offset);
        
        if (buffers[n_buffers].start == MAP_FAILED) {
            perror("mmap");
            close(fd);
            return 1;
        }
    }
    
    // 6. Encolar buffers con ioctl()
    for (unsigned int i = 0; i < n_buffers; ++i) {
        CLEAR(buf);
        buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        buf.memory = V4L2_MEMORY_MMAP;
        buf.index = i;
        
        if (ioctl(fd, VIDIOC_QBUF, &buf) == -1) {
            perror("VIDIOC_QBUF");
            close(fd);
            return 1;
        }
    }
    
    // 7. Iniciar streaming con ioctl()
    type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    if (ioctl(fd, VIDIOC_STREAMON, &type) == -1) {
        perror("VIDIOC_STREAMON");
        close(fd);
        return 1;
    }
    
    printf("Capturando 10 frames...\n");
    
    // 8. Capturar frames
    for (int i = 0; i < 10; i++) {
        fd_set fds;
        struct timeval tv;
        int r;
        
        FD_ZERO(&fds);
        FD_SET(fd, &fds);
        
        tv.tv_sec = 2;
        tv.tv_usec = 0;
        
        // select() es una syscall
        r = select(fd + 1, &fds, NULL, NULL, &tv);
        
        if (r == -1) {
            perror("select");
            break;
        }
        
        if (r == 0) {
            printf("Timeout\n");
            break;
        }
        
        // Desencolar buffer con ioctl()
        CLEAR(buf);
        buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
        buf.memory = V4L2_MEMORY_MMAP;
        
        if (ioctl(fd, VIDIOC_DQBUF, &buf) == -1) {
            perror("VIDIOC_DQBUF");
            break;
        }
        
        printf("Frame %d capturado, tamaño: %d bytes\n", i, buf.bytesused);
        
        // Aquí tienes los datos de la imagen en:
        // buffers[buf.index].start con tamaño buf.bytesused
        
        // Guardar primer frame como ejemplo
        if (i == 0) {
            char filename[32];
            snprintf(filename, sizeof(filename), "frame_%d.raw", i);
            int out_fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, 0644);
            if (out_fd != -1) {
                write(out_fd, buffers[buf.index].start, buf.bytesused);
                close(out_fd);
                printf("Frame guardado en %s\n", filename);
            }
        }
        
        // Re-encolar buffer con ioctl()
        if (ioctl(fd, VIDIOC_QBUF, &buf) == -1) {
            perror("VIDIOC_QBUF");
            break;
        }
    }
    
    // 9. Detener streaming con ioctl()
    type = V4L2_BUF_TYPE_VIDEO_CAPTURE;
    if (ioctl(fd, VIDIOC_STREAMOFF, &type) == -1) {
        perror("VIDIOC_STREAMOFF");
    }
    
    // 10. Liberar recursos
    for (unsigned int i = 0; i < n_buffers; ++i) {
        munmap(buffers[i].start, buffers[i].length);
    }
    
    free(buffers);
    close(fd);
    
    printf("Captura finalizada\n");
    
    return 0;
}